{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","user","setUser","amount","setAmount","search","setSearch","buyAmount","setBuyAmount","searching","setSearching","buying","setBuying","selling","setSelling","searchResult","setSearchResult","getUser","id","fetch","method","then","response","json","data","useEffect","className","Container","Grid","columns","padded","Row","Column","width","Fragment","style","minHeight","float","Header","as","name","balance","paddingTop","Input","type","value","onChange","target","Button","marginLeft","onClick","alert","disabled","placeholder","finally","length","symbol","currency","stockExchange","quote","price","min","requestOptions","headers","body","JSON","stringify","quantity","stock","catch","undefined","boughtStock","boughtStockDetails","map","index","sellStock","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.fa0aa601.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Container, Grid, Header, Input } from \"semantic-ui-react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [user, setUser] = React.useState({});\n  const [amount, setAmount] = React.useState(0);\n  const [search, setSearch] = React.useState(\"\");\n  const [buyAmount, setBuyAmount] = React.useState(0);\n  const [searching, setSearching] = React.useState(false);\n  const [buying, setBuying] = React.useState(false);\n  const [selling, setSelling] = React.useState(false);\n\n  const [searchResult, setSearchResult] = React.useState();\n\n  const addBalance = () => {\n    const requestOptions = {\n      method: \"PUT\",\n    };\n    fetch(\n      \"/api/portfolio/add-balance/\" +\n        user.id +\n        \"/\" +\n        amount,\n      requestOptions\n    ).then(() => {\n      getUser(user.id);\n      alert(\"Balance Added\");\n      setAmount(0);\n    });\n  };\n  const searchStock = () => {\n    setSearching(true);\n    const requestOptions = {\n      method: \"POST\",\n    };\n    fetch(\n      \"/api/portfolio/get-stock/\" + search,\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setSearchResult(data);\n      })\n      .finally(() => {\n        setSearching(false);\n      });\n  };\n  const buyStock = () => {\n    setBuying(true);\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        quantity: buyAmount,\n        stock: {\n          symbol: searchResult.symbol,\n          name: searchResult.name,\n          currency: searchResult.currency,\n          stockExchange: searchResult.stockExchange,\n          price: searchResult.quote.price,\n        },\n      }),\n    };\n    fetch(\n      \"/api/portfolio/buy-stock/\" + user.id,\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then(() => {\n        getUser(user.id);\n        alert(\"Stock buying complete\");\n      })\n      .catch(() => {\n        alert(\"Error buying Stock\");\n        getUser(user.id);\n      })\n      .finally(() => {\n        setBuying(false);\n      });\n  };\n\n  const sellStock = (index) => {\n    setSelling(true);\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n    };\n    fetch(\n      \"/api/portfolio/sell-stock/\" + user.id + \"/\" + index,\n      requestOptions\n    )\n      .then(() => {\n        getUser(user.id);\n        alert(\"Stock Sold\");\n      })\n      .catch(() => {\n        getUser(user.id);\n        alert(\"Error selling Stock\");\n      })\n      .finally(() => {\n        setSelling(false);\n      });\n  };\n\n  const getUser = (id) => {\n    const requestOptions = {\n      method: \"GET\",\n    };\n    fetch(\"/api/portfolio/\" + id, requestOptions)\n      .then((response) => response.json())\n      .then((data) => setUser(data));\n  };\n  React.useEffect(() => {\n    getUser(1);\n  }, []);\n  return (\n    <div className=\"App\">\n      <Container>\n        <Grid columns={2} padded>\n          <Grid.Row>\n            <Grid.Column width={8}>\n              <React.Fragment>\n                <Grid.Row style={{ minHeight: \"100px\" }}>\n                  <Grid.Column width={8}>\n                    <div style={{ float: \"left\" }}>\n                      <Header as=\"h3\">User Name: {user.name}</Header>\n                      <Header as=\"h3\">Balance: {user.balance}</Header>\n                    </div>\n                    <div style={{ float: \"right\", paddingTop: \"15px\" }}>\n                      <Input\n                        type=\"number\"\n                        value={amount}\n                        onChange={(data) => {\n                          setAmount(data.target.value);\n                        }}\n                      ></Input>\n                      <Button\n                        style={{ marginLeft: \"10px\" }}\n                        onClick={addBalance}\n                        disabled={amount <= 0}\n                      >\n                        Add Balance\n                      </Button>\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                  <hr></hr>\n                  <Grid.Column width={6}>\n                    <Input\n                      placeholder=\"Search for a stock\"\n                      onChange={(data) => {\n                        setSearch(data.target.value);\n                      }}\n                    ></Input>\n                    <Button\n                      style={{ marginLeft: \"10px\" }}\n                      onClick={searchStock}\n                      disabled={searching || search.length === 0}\n                    >\n                      Search\n                    </Button>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                  <Grid.Column width={6}>\n                    {searchResult && (\n                      <>\n                        <div>Symbol : {searchResult.symbol}</div>\n                        <div>Name : {searchResult.name}</div>\n                        <div>Currency : {searchResult.currency}</div>\n                        <div>StockExchange : {searchResult.stockExchange}</div>\n                        <div>Price : {searchResult.quote.price}</div>\n                      </>\n                    )}\n                  </Grid.Column>\n                  {searchResult && (\n                    <Grid.Column width={6}>\n                      <Input\n                        placeholder=\"Buy Quantity\"\n                        type=\"number\"\n                        min=\"1\"\n                        value={buyAmount}\n                        onChange={(data) => {\n                          setBuyAmount(data.target.value);\n                        }}\n                      ></Input>\n                      <Button\n                        style={{ marginLeft: \"10px\" }}\n                        onClick={buyStock}\n                        disabled={\n                          buyAmount === null ||\n                          buyAmount === undefined ||\n                          buyAmount <= 0 ||\n                          buying\n                        }\n                      >\n                        Buy\n                      </Button>\n                    </Grid.Column>\n                  )}\n                </Grid.Row>\n              </React.Fragment>\n            </Grid.Column>\n            <Grid.Column width={8}>\n              {user?.boughtStock?.boughtStockDetails.length > 0 && (\n                <Header as=\"h4\">Bought Stock Details:</Header>\n              )}\n              {user?.boughtStock?.boughtStockDetails?.map((data, index) => {\n                return (\n                  <div>\n                    <Button\n                      style={{ float: \"right\" }}\n                      disabled={selling}\n                      onClick={() => {\n                        sellStock(index);\n                      }}\n                    >\n                      Sell\n                    </Button>\n                    <div>Stock Name: {data.stock.name}</div>\n                    <div>Price: {data.stock.price}</div>\n                    <div>Quantity: {data.quantity}</div>\n                    <div>Currency: {data.stock.currency}</div>\n                    <div>StockExchange: {data.stock.stockExchange}</div>\n                    <div>Symbol: {data.stock.symbol}</div>\n                    <hr />\n                  </div>\n                );\n              })}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}